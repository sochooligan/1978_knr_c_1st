** ch 1.1 Getting Started
Exercise 1-1.  Run this program on your system.  Experiment with leaving out
parts of the program, to see what error messages you get. □

Exercise 1-2.  Experiment to find out what happens when printf's argument
string contains \x, where x is some character not listed above. □

** ch 1.3 The For Statement
Excercise 1-5.  Modify the temperature conversion program to print the table
in reverse order, that is, from 300 degrees to 0. □

** ch 1.5 A Collection of Useful Programs
Exercise 1-6.  Write a program to count blanks, tabs, and newlines. □
Exercise 1-7.  Write a program to copy its input to its output, replacing
each string of one or more blanks by a single blank. □
Exercise 1-8.  Write a program to replace each tab by the three-character
sequence >, backspace, -, which prints as ->, and each backspace by the
         (> \b -)
similar sequence <-.  This makes tabs and backspaces visible. □

Exercise 1-9.  How would you test the word count program?  What are some
boundaries?  □
Exercise 1-10.  Write a program which prints the words in its input, one per
line.  □
Exercise 1-11.  Revise the word count program to use a better definition of
"word", for example, a sequence of letters, digits and apostrophes that
begins with a letter.  □

** ch 1.6 Arrays
Exercise 1-12.  Write a program to print a histogram of the lengths of words
in it input.  It is easiest to draw the histogram horizontally; a vertical
orientation is more challenging.  □

** ch 1.7 Functions
Exercise 1-13.  Write a program to convert its input to lower case, using a
function lower(c) which returns c if c is not a letter, and the lower case
value of c if it is a letter.  □

** ch 1.9 Character Arrays
Exercise 1-14.  Revise the main routine of the longest-line program so it
will correctly print the length of arbitrarily long input lines, and as much
as possible of the text.  □

Exercise 1-15.  Write a program to print all lines that are longer than 80
characters. □

Exercise 1-16.  Write a program to remove trailing blank and tabs from each
line of input, and to delete entirely blank lines. □

Exercise 1-17.  Write a function reverse(s) which reverses the character
string s.  Use it to write a program which reverses its input a line at a
time. □

** ch 1.10 Scope; External Variables
Exercise 1-18.  The test in the for statement of getline above is rather
ungainly.  Rewrite the program to make it clearer, but retain the same
behavior at end of file or buffer overflow.  Is this behavior the most
reasonable?  □

** ch 1.11 Summary
Exercise 1-19.  Write a program detab which replaces tabs in the input with
the proper number of blanks to space to the next tab stop.  Assume a fixed
set of tab stops, say every n positions. □

Exercise 1-20. Write the program entab which replaces strings of blanks by
the minimum number of tabs and blanks to achieve the same spacing.  Use the
same tab stops as for detab. □

Exercise 1-21.  Write a program to "find" long input lines after the last
non-blank character that occurs before the n-th column of input, where n is a
parameter.  Make sure your program does something intelligent with very long
lines, and if there are no blanks or tabs before the specified column.  □

Exercise 1-22.  Write a program to remove all comments from a C program.
Don't forget to handle quoted strings and character constants properly. □

Exercise 1-23.  Write a program to check a C program for rudimentary syntax
                                                        -| 初步的, 基本的
errors like unbalanced parentheses, brackets and braces.  Don't forget about
quotes, both single and double, and comments.  (This program is hard if you
do it in full generality.)  □
